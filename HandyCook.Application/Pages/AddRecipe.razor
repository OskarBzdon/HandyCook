@using HandyCook.Application.Data
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;

@inject ApplicationDbContext ctx
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@page "/recipe/add"

<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4">Add Recipe</MudText>

            <MudTextField Label="Title" @bind-Value="model.Name" />
            <MudTextField Label="Description" @bind-Value="model.Description" />
            
            <MudFileUpload T="IBrowserFile" Accept=".jpg, .png" FilesChanged="UploadFile">
                <ButtonTemplate>
                    <MudButton HtmlTag="Upload Image"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Image"
                               for="@context">
                        Upload Image
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@addRecipe">Add recipe</MudButton>
            
            @if (isError)
            {
                <MudText Typo="Typo.h6" Color="Color.Error">@message</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6" Color="Color.Primary">@message</MudText>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private Recipe model = new Recipe();
    private string message = string.Empty;
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authState.User;

        var userId = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userId is not null)
        {
            model.UserNavigationId = userId.Value;
        }
    }

    private async Task UploadFile(IBrowserFile file)
    {
        model.Images.Add(new File(file));
        //TODO upload the files to the server
    }

    private async Task addRecipe()
    {
        try
        {
            var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var user = authState.User;

            await ctx.Recipes.AddAsync(model);
            await ctx.SaveChangesAsync();
            isError = false;
        }
        catch (OperationCanceledException ex)
        {
            Console.WriteLine(ex.Message);
            isError = true;
            message = ex.Message;
        }
    }
}
