@using HandyCook.Application.Data
@using HandyCook.Application.Services;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;
@using MudBlazor

@inject ApplicationDbContext ctx
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject ISnackbar Snackbar // Add this to your @inject directives
@inject NavigationManager NavigationManager // For redirection
@inject IUserService UserService

@page "/recipe/add"

<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4">Add Recipe</MudText>

            <MudTextField Label="Title" @bind-Value="model.Name" />
            <MudTextField Label="Description" @bind-Value="model.Description" />

            <MudFileUpload T="IBrowserFile" Accept=".jpg, .png" FilesChanged="UploadFile">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Image"
                               for="@context">
                        Upload Image
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveRecipe">Add recipe</MudButton>
            
            @if (isError)
            {
                <MudText Typo="Typo.h6" Color="Color.Error">@message</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6" Color="Color.Primary">@message</MudText>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private Recipe model = new Recipe();
    private string message = string.Empty;
    private bool isError = false;
    private bool isFileUploaded = false; // To keep track of file upload status


    protected override async Task OnInitializedAsync()
    {
        var userId = await UserService.GetCurrentUserIdAsync();
        if (userId is not null)
        {
            model.UserNavigationId = userId;
        }
    }

    private async Task UploadFile(IBrowserFile file)
    {
        try
        {
            var fileModel = await File.CreateAsync(file);
            model.Images.Add(fileModel);
            isFileUploaded = true;
            Snackbar.Add("File uploaded successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            isFileUploaded = false;
            Snackbar.Add("Failed to upload file: " + ex.Message, Severity.Error);
        }
    }

    private async Task SaveRecipe()
    {
        try
        {
            model.UserNavigationId = await UserService.GetCurrentUserIdAsync();
            if (string.IsNullOrEmpty(model.UserNavigationId))
            {
                throw new InvalidOperationException("User must be logged in to add a recipe.");
            }

            if (!isFileUploaded)
            {
                Snackbar.Add("Please upload a file before adding the recipe.", Severity.Warning);
                return;
            }

            await ctx.Recipes.AddAsync(model);
            await ctx.SaveChangesAsync();
            Snackbar.Add("Recipe added successfully!", Severity.Success);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to add recipe: {ex.Message}", Severity.Error);
        }
    }
}
